{
    "syft-llm-router": "0.0.1",
    "info": {
        "title": "SyftBox LLM Router Specification",
        "version": "0.0.1",
        "description": "A specification for standardizing outputs from various LLM providers including OpenAI, Anthropic, HuggingFace, etc. with RAG capabilities",
        "license": {
            "name": "MIT",
            "url": "https://opensource.org/licenses/MIT"
        },
        "extensions": [
            {
                "name": "x-extension-process",
                "description": "Describes how extensions should be handled in this specification"
            }
        ]
    },
    "servers": [
        {
            "name": "Example Server",
            "url": "https://api.example.com/v1"
        }
    ],
    "methods": [
        {
            "name": "generateCompletion",
            "description": "Generate a text completion based on a prompt",
            "params": [
                {
                    "name": "model",
                    "description": "The model identifier to use for generation",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "name": "prompt",
                    "description": "The input text to generate from",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "name": "options",
                    "description": "Additional parameters for the generation",
                    "required": false,
                    "schema": {
                        "$ref": "#/components/schemas/GenerationOptions",
                        "description": "Additional parameters for the generation"
                    }
                }
            ],
            "result": {
                "name": "completionResult",
                "description": "The result of the completion operation",
                "schema": {
                    "$ref": "#/components/schemas/CompletionResponse",
                    "description": "The result of the completion operation"
                }
            },
            "errors": [
                {
                    "$ref": "#/components/errors/InvalidRequestError",
                    "description": "The request was invalid or malformed"
                },
                {
                    "$ref": "#/components/errors/RateLimitExceededError",
                    "description": "The request exceeded the rate limit"
                }
            ]
        },
        {
            "name": "generateChat",
            "description": "Generate a chat response based on a conversation history",
            "params": [
                {
                    "name": "model",
                    "description": "The model identifier to use for chat",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "name": "messages",
                    "description": "Array of message objects representing the conversation",
                    "required": true,
                    "schema": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Message",
                            "description": "A message in a chat conversation"
                        }
                    }
                },
                {
                    "name": "options",
                    "description": "Additional parameters for the generation",
                    "required": false,
                    "schema": {
                        "$ref": "#/components/schemas/GenerationOptions",
                        "description": "Additional parameters for the generation"
                    }
                }
            ],
            "result": {
                "name": "chatResult",
                "description": "The result of the chat operation",
                "schema": {
                    "$ref": "#/components/schemas/ChatResponse",
                    "description": "The result of the chat operation"
                }
            },
            "errors": [
                {
                    "$ref": "#/components/errors/InvalidRequest"
                },
                {
                    "$ref": "#/components/errors/RateLimitExceeded"
                }
            ]
        },
        {
            "name": "embedDocument",
            "description": "Process JSON files in a specified location and create embeddings for indexing",
            "params": [
                {
                    "name": "watchPath",
                    "description": "Directory path to watch for new JSON files",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "name": "embedderEndpoint",
                    "description": "HTTP endpoint of the embedding service",
                    "required": true,
                    "schema": {
                        "type": "string",
                        "format": "uri"
                    }
                },
                {
                    "name": "indexerEndpoint",
                    "description": "HTTP endpoint of the indexing service",
                    "required": true,
                    "schema": {
                        "type": "string",
                        "format": "uri"
                    }
                },
                {
                    "name": "options",
                    "description": "Additional parameters for embedding configuration",
                    "required": false,
                    "schema": {
                        "$ref": "#/components/schemas/EmbeddingOptions"
                    }
                }
            ],
            "result": {
                "name": "embeddingResult",
                "description": "The result of the document embedding operation",
                "schema": {
                    "$ref": "#/components/schemas/EmbeddingResponse"
                }
            },
            "errors": [
                {
                    "$ref": "#/components/errors/InvalidRequestError"
                },
                {
                    "$ref": "#/components/errors/FileProcessingError"
                },
                {
                    "$ref": "#/components/errors/EmbeddingServiceError"
                },
                {
                    "$ref": "#/components/errors/IndexerServiceError"
                }
            ]
        },
        {
            "name": "retrieveDocuments",
            "description": "Retrieve documents from the index based on a search query",
            "params": [
                {
                    "name": "query",
                    "description": "Search query to find relevant documents",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "name": "embedderEndpoint",
                    "description": "HTTP endpoint of the embedding service",
                    "required": true,
                    "schema": {
                        "type": "string",
                        "format": "uri"
                    }
                },
                {
                    "name": "indexerEndpoint",
                    "description": "HTTP endpoint of the indexing service",
                    "required": true,
                    "schema": {
                        "type": "string",
                        "format": "uri"
                    }
                },
                {
                    "name": "options",
                    "description": "Additional parameters for retrieval configuration",
                    "required": false,
                    "schema": {
                        "$ref": "#/components/schemas/RetrievalOptions"
                    }
                }
            ],
            "result": {
                "name": "retrievalResult",
                "description": "The result of the document retrieval operation",
                "schema": {
                    "$ref": "#/components/schemas/RetrievalResponse"
                }
            },
            "errors": [
                {
                    "$ref": "#/components/errors/InvalidRequestError"
                },
                {
                    "$ref": "#/components/errors/EmbeddingServiceError"
                },
                {
                    "$ref": "#/components/errors/IndexerServiceError"
                }
            ]
        }
    ],
    "components": {
        "x-extension-types": {
            "OpenAI": {
                "namespace": "x-openai",
                "description": "Extensions specific to OpenAI models",
                "website": "https://platform.openai.com/docs/api-reference"
            },
            "Anthropic": {
                "namespace": "x-anthropic",
                "description": "Extensions specific to Anthropic models",
                "website": "https://docs.anthropic.com/claude/reference"
            },
            "HuggingFace": {
                "namespace": "x-hf",
                "description": "Extensions specific to HuggingFace models",
                "website": "https://huggingface.co/docs/api-inference"
            },
            "LangChain": {
                "namespace": "x-langchain",
                "description": "Extensions specific to LangChain framework",
                "website": "https://js.langchain.com/docs/"
            },
            "LlamaIndex": {
                "namespace": "x-llamaindex",
                "description": "Extensions specific to LlamaIndex framework",
                "website": "https://docs.llamaindex.ai/"
            }
        },
        "schemas": {
            "Message": {
                "type": "object",
                "description": "A message in a chat conversation",
                "required": [
                    "role",
                    "content"
                ],
                "properties": {
                    "role": {
                        "type": "string",
                        "enum": [
                            "system",
                            "user",
                            "assistant"
                        ],
                        "description": "The role of the message author"
                    },
                    "content": {
                        "type": "string",
                        "description": "The content of the message"
                    },
                    "name": {
                        "type": "string",
                        "description": "Optional name identifying the message author"
                    }
                }
            },
            "Document": {
                "type": "object",
                "description": "Document structure for embedding and retrieval",
                "required": [
                    "id",
                    "text"
                ],
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Unique identifier for the document"
                    },
                    "text": {
                        "type": "string",
                        "description": "Text content to be embedded"
                    },
                    "metadata": {
                        "type": "object",
                        "additionalProperties": true,
                        "description": "Additional metadata associated with the document"
                    }
                }
            },
            "GenerationOptions": {
                "type": "object",
                "description": "Options that control the text generation process",
                "properties": {
                    "maxTokens": {
                        "type": "integer",
                        "description": "Maximum number of tokens to generate"
                    },
                    "temperature": {
                        "type": "number",
                        "description": "Sampling temperature",
                        "minimum": 0,
                        "maximum": 2
                    },
                    "topP": {
                        "type": "number",
                        "description": "Nucleus sampling parameter",
                        "minimum": 0,
                        "maximum": 1
                    },
                    "stopSequences": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Sequences that will stop generation if encountered"
                    },
                    "logprobs": {
                        "type": "boolean",
                        "description": "Whether to return log probabilities of the output tokens"
                    },
                    "topLogprobs": {
                        "type": "integer",
                        "description": "Number of most likely tokens to return logprobs for (only works when logprobs=true)"
                    },
                    "extensions": {
                        "type": "object",
                        "additionalProperties": true,
                        "description": "Container for router-specific extensions"
                    }
                }
            },
            "EmbeddingOptions": {
                "type": "object",
                "description": "Options for controlling document embedding process",
                "properties": {
                    "chunkSize": {
                        "type": "integer",
                        "description": "Size of text chunks for embedding"
                    },
                    "chunkOverlap": {
                        "type": "integer",
                        "description": "Overlap between consecutive chunks"
                    },
                    "batchSize": {
                        "type": "integer",
                        "description": "Number of documents to process in a single batch"
                    },
                    "embeddingModel": {
                        "type": "string",
                        "description": "Name of embedding model to use"
                    },
                    "dimensions": {
                        "type": "integer",
                        "description": "Dimensionality of the embedding vectors"
                    },
                    "processInterval": {
                        "type": "integer",
                        "description": "Interval in seconds to check for new files"
                    },
                    "extensions": {
                        "type": "object",
                        "additionalProperties": true,
                        "description": "Container for embedder-specific extensions"
                    }
                }
            },
            "RetrievalOptions": {
                "type": "object",
                "description": "Options for controlling document retrieval process",
                "properties": {
                    "limit": {
                        "type": "integer",
                        "description": "Maximum number of documents to retrieve"
                    },
                    "similarityThreshold": {
                        "type": "number",
                        "description": "Minimum similarity score for retrieved documents",
                        "minimum": 0,
                        "maximum": 1
                    },
                    "includeMetadata": {
                        "type": "boolean",
                        "description": "Whether to include document metadata in results"
                    },
                    "includeEmbeddings": {
                        "type": "boolean",
                        "description": "Whether to include vector embeddings in results"
                    },
                    "extensions": {
                        "type": "object",
                        "additionalProperties": true,
                        "description": "Container for retriever-specific extensions"
                    }
                }
            },
            "CompletionResponse": {
                "type": "object",
                "description": "The result of the completion operation",
                "required": [
                    "id",
                    "model",
                    "text",
                    "usage"
                ],
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "Unique identifier (UUID) for this completion"
                    },
                    "model": {
                        "type": "string",
                        "description": "Model used for generation"
                    },
                    "text": {
                        "type": "string",
                        "description": "Generated text"
                    },
                    "finishReason": {
                        "type": "string",
                        "enum": [
                            "stop",
                            "length",
                            "content_filter"
                        ],
                        "description": "Reason why the generation stopped"
                    },
                    "usage": {
                        "$ref": "#/components/schemas/Usage"
                    },
                    "providerInfo": {
                        "type": "object",
                        "description": "Router-specific information"
                    },
                    "logprobs": {
                        "$ref": "#/components/schemas/LogProbs",
                        "description": "Log probabilities for generated tokens"
                    }
                }
            },
            "ChatResponse": {
                "type": "object",
                "description": "The result of the chat operation",
                "required": [
                    "id",
                    "model",
                    "message",
                    "usage"
                ],
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "Unique identifier (UUID) for this chat completion"
                    },
                    "model": {
                        "type": "string",
                        "description": "Model used for generation"
                    },
                    "message": {
                        "$ref": "#/components/schemas/Message",
                        "description": "The message generated by the assistant"
                    },
                    "finishReason": {
                        "type": "string",
                        "enum": [
                            "stop",
                            "length",
                            "content_filter"
                        ],
                        "description": "Reason why the generation stopped"
                    },
                    "usage": {
                        "$ref": "#/components/schemas/Usage",
                        "description": "Token usage information for the request and response"
                    },
                    "providerInfo": {
                        "type": "object",
                        "description": "Router-specific information"
                    },
                    "logprobs": {
                        "$ref": "#/components/schemas/LogProbs",
                        "description": "Log probabilities for generated tokens"
                    }
                }
            },
            "EmbeddingResponse": {
                "type": "object",
                "description": "The result of the document embedding operation",
                "required": [
                    "id",
                    "status",
                    "processedCount"
                ],
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "Unique identifier for this embedding operation"
                    },
                    "status": {
                        "type": "string",
                        "enum": [
                            "success",
                            "partial_success",
                            "failure"
                        ],
                        "description": "Status of the embedding operation"
                    },
                    "processedCount": {
                        "type": "integer",
                        "description": "Number of documents successfully processed"
                    },
                    "failedCount": {
                        "type": "integer",
                        "description": "Number of documents that failed processing"
                    },
                    "providerInfo": {
                        "type": "object",
                        "description": "Router-specific information"
                    }
                }
            },
            "RetrievalResponse": {
                "type": "object",
                "description": "The result of the document retrieval operation",
                "required": [
                    "id",
                    "query",
                    "results"
                ],
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "Unique identifier for this retrieval operation"
                    },
                    "query": {
                        "type": "string",
                        "description": "The original search query"
                    },
                    "results": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/DocumentResult"
                        },
                        "description": "Retrieved documents matching the query"
                    },
                    "providerInfo": {
                        "type": "object",
                        "description": "Router-specific information"
                    }
                }
            },
            "DocumentResult": {
                "type": "object",
                "description": "A document retrieved from the index",
                "required": [
                    "id",
                    "score",
                    "content"
                ],
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Identifier for the document"
                    },
                    "score": {
                        "type": "number",
                        "description": "Similarity score between query and document"
                    },
                    "content": {
                        "type": "string",
                        "description": "Text content of the document or chunk"
                    },
                    "metadata": {
                        "type": "object",
                        "additionalProperties": true,
                        "description": "Metadata associated with the document"
                    },
                    "embedding": {
                        "type": "array",
                        "items": {
                            "type": "number"
                        },
                        "description": "Vector embedding of the document (if requested)"
                    }
                }
            },
            "Usage": {
                "type": "object",
                "description": "Token usage information for the request and response",
                "required": [
                    "promptTokens",
                    "completionTokens",
                    "totalTokens"
                ],
                "properties": {
                    "promptTokens": {
                        "type": "integer",
                        "description": "Number of tokens in the prompt"
                    },
                    "completionTokens": {
                        "type": "integer",
                        "description": "Number of tokens in the completion"
                    },
                    "totalTokens": {
                        "type": "integer",
                        "description": "Total tokens used"
                    }
                }
            },
            "LogProbs": {
                "type": "object",
                "description": "Log probabilities for generated tokens",
                "required": [
                    "tokenLogprobs"
                ],
                "properties": {
                    "tokenLogprobs": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "number"
                        },
                        "description": "Map of tokens to their log probabilities"
                    }
                }
            }
        },
        "errors": {
            "RouterError": {
                "type": "object",
                "description": "Base error type for all router errors",
                "required": [
                    "code",
                    "message"
                ],
                "properties": {
                    "code": {
                        "type": "integer",
                        "description": "Error code"
                    },
                    "message": {
                        "type": "string",
                        "description": "Human readable error message"
                    },
                    "data": {
                        "type": "object",
                        "additionalProperties": true,
                        "description": "Additional data related to the error"
                    }
                }
            },
            "InvalidRequestError": {
                "description": "The request was invalid or malformed",
                "allOf": [
                    {
                        "$ref": "#/components/errors/RouterError",
                        "description": "The request was invalid or malformed"
                    },
                    {
                        "properties": {
                            "code": {
                                "type": "integer",
                                "enum": [
                                    400
                                ]
                            }
                        }
                    }
                ]
            },
            "RateLimitExceededError": {
                "description": "The request exceeded the rate limit",
                "allOf": [
                    {
                        "$ref": "#/components/errors/RouterError",
                        "description": "The request exceeded the rate limit"
                    },
                    {
                        "properties": {
                            "code": {
                                "type": "integer",
                                "enum": [
                                    429
                                ]
                            }
                        }
                    }
                ]
            },
            "FileProcessingError": {
                "description": "Error processing files in the watch directory",
                "allOf": [
                    {
                        "$ref": "#/components/errors/RouterError"
                    },
                    {
                        "properties": {
                            "code": {
                                "type": "integer",
                                "enum": [
                                    500
                                ]
                            }
                        }
                    }
                ]
            },
            "EmbeddingServiceError": {
                "description": "Error communicating with the embedding service",
                "allOf": [
                    {
                        "$ref": "#/components/errors/RouterError"
                    },
                    {
                        "properties": {
                            "code": {
                                "type": "integer",
                                "enum": [
                                    502
                                ]
                            }
                        }
                    }
                ]
            },
            "IndexerServiceError": {
                "description": "Error communicating with the indexer service",
                "allOf": [
                    {
                        "$ref": "#/components/errors/RouterError"
                    },
                    {
                        "properties": {
                            "code": {
                                "type": "integer",
                                "enum": [
                                    503
                                ]
                            }
                        }
                    }
                ]
            }
        }
    }
}
